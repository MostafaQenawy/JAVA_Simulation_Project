\*
* Name: Mohaned Khaled Hassan
* ID: 2001372
* GitHub: Username: MohandKhh
*/

package Project;

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Polygon;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;
import javafx.stage.FileChooser;
import javafx.stage.Stage;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;

public class Main extends Application {
        private File inputFile;
        static File oututFile = null;

        public static void main(String[] args) {

            launch(args);
        }

        @Override
        public void start(Stage primaryStage) {

            primaryStage.setTitle("Hello");
            GridPane grid = new GridPane();
            Pane layout = new Pane();
            Scene scene1 = new Scene(grid, 400, 500);
            Scene scene2 = new Scene(layout,1500,750);
            grid.setVgap(10);
            grid.setHgap(3);
            Label lb = new Label("Please Choose your MDL file");
            javafx.scene.control.Button btn = new javafx.scene.control.Button("       Browse       ");
            btn.setOnAction(z -> {
                FileChooser fc = new FileChooser();
                fc.getExtensionFilters().addAll(new FileChooser.ExtensionFilter("MDL File", "*mdl"));
                inputFile = fc.showOpenDialog(primaryStage);
                System.out.println(inputFile);
                
                
/*
***********************************************************************
*************************************************************************************************
*/

\*
* Name: Salma Yasser Abdelmageed Meckawy Hemdan
* ID: 20P7211
* GitHub Username: Salma20020418
*/

 //file extraction
                try {
                    oututFile = FileHandling.extract(inputFile);
                    System.out.println("Extraction completed. Output file: " + oututFile.getName());
                } catch (FileNotFoundException e) {
                    System.out.println("File not found: " + e.getMessage());
                } catch (Exception e) {
                    System.out.println(e.getMessage());
                }
                // block extraction
                try {
                    for (Block b : PropertiesOfDiagrams.extractBlocks(oututFile)) {
                        System.out.println(b);
                        System.out.println("Input Points = " + b.calculateLeftSidePoints());
                        System.out.println("Output Points = " + b.calculateRightSidePoints());
                    }
                } catch (FileNotFoundException e) {
                    System.out.println("File not found: " + e.getMessage());
                } catch (Exception e) {
                    System.out.println(e.getMessage());
                }

                System.out.println();
                //line extraction
                try {
                    for (Line l : PropertiesOfDiagrams.extractLine(oututFile))
                        System.out.println(l);
                } catch (FileNotFoundException e) {
                    System.out.println("File not found: " + e.getMessage());
                } catch (Exception e) {
                    System.out.println(e.getMessage());
  /*
   * Begining
   * Of
   * JAVAFX
   * */
                
                
 /*
  * Name: Mostafa Hussin 
  */

                Image image = null;
                ImageView imageView = null;


                try {
                    for (Block b : PropertiesOfDiagrams.extractBlocks(oututFile)) {
                        double width = (b.positionX2) - (b.positionX1);
                        double height = (b.positionY2) - (b.positionY1);
                        Rectangle r = new Rectangle((b.positionX1), (b.positionY1), width, height);
                        r.setFill(Color.WHITE);
                        r.setStrokeWidth(3);
                        r.setStroke(Color.web("39A8E8FF"));
                        r.strokeWidthProperty();

                        Label label = new Label(b.name);
                        label.setTextFill(Color.web("3399CC"));
                        label.setFont(new Font(12));
                        Font boldFont = Font.font(label.getFont().getFamily(), FontWeight.BOLD, label.getFont().getSize());
                        label.setFont(boldFont);
                        label.setLayoutX(b.positionX1);
                        label.setLayoutY(b.positionY2 + 3);
                        layout.getChildren().addAll(label, r);

                        if (!b.blockMirror) {
                            if (b.inputsSymbols != null && b.inputsSymbols.length() == b.calculateLeftSidePoints().size()) {
                                for (int i = 0; i < b.inputsSymbols.length(); i++) {
                                    String character = Character.toString(b.inputsSymbols.charAt(i));
                                    Text symbolIn = new Text(character);
                                    symbolIn.setFont(Font.font("Arial", 13));
                                    Font boldFont2 = Font.font(symbolIn.getFont().getFamily(), FontWeight.BOLD, symbolIn.getFont().getSize());
                                    symbolIn.setFont(boldFont2);
                                    symbolIn.setX(b.calculateLeftSidePoints().get(i).x + 1);
                                    symbolIn.setY(b.calculateLeftSidePoints().get(i).y + 3);
                                    layout.getChildren().add(symbolIn);
                                }
                            }

                            if (b.outputsSymbols != null && b.outputsSymbols.length() == b.calculateRightSidePoints().size()) {
                                for (int i = 0; i < b.outputsSymbols.length(); i++) {
                                    String character = Character.toString(b.outputsSymbols.charAt(i));
                                    Text symbolOut = new Text(character);
                                    symbolOut.setFont(Font.font("Arial", 13));
                                    Font boldFont2 = Font.font(symbolOut.getFont().getFamily(), FontWeight.BOLD, symbolOut.getFont().getSize());
                                    symbolOut.setFont(boldFont2);
                                    symbolOut.setX(b.calculateRightSidePoints().get(i).x + 1);
                                    symbolOut.setY(b.calculateRightSidePoints().get(i).y + 3);
                                    layout.getChildren().add(symbolOut);
                                }
                            }
                        } else if (b.blockMirror) {
                            if (b.inputsSymbols != null && b.inputsSymbols.length() == b.calculateRightSidePoints().size()) {
                                for (int i = 0; i < b.inputsSymbols.length(); i++) {
                                    String character = Character.toString(b.inputsSymbols.charAt(i));
                                    Text symbolIn = new Text(character);
                                    symbolIn.setFont(Font.font("Arial", 13));
                                    Font boldFont2 = Font.font(symbolIn.getFont().getFamily(), FontWeight.BOLD, symbolIn.getFont().getSize());
                                    symbolIn.setFont(boldFont2);
                                    symbolIn.setX(b.calculateRightSidePoints().get(i).x + 1);
                                    symbolIn.setY(b.calculateRightSidePoints().get(i).y + 3);
                                    layout.getChildren().add(symbolIn);
                                }
                            }

                            if (b.outputsSymbols != null && b.outputsSymbols.length() == b.calculateLeftSidePoints().size()) {
                                for (int i = 0; i < b.outputsSymbols.length(); i++) {
                                    String character = Character.toString(b.outputsSymbols.charAt(i));
                                    Text symbolOut = new Text(character);
                                    symbolOut.setFont(Font.font("Arial", 13));
                                    Font boldFont2 = Font.font(symbolOut.getFont().getFamily(), FontWeight.BOLD, symbolOut.getFont().getSize());
                                    symbolOut.setFont(boldFont2);
                                    symbolOut.setX(b.calculateLeftSidePoints().get(i).x);
                                    symbolOut.setY(b.calculateLeftSidePoints().get(i).y);
                                    layout.getChildren().add(symbolOut);
                                }
                            }
                        }
//                        if (b.name.equalsIgnoreCase("Saturation")){
//                            image = new Image("C:\\Users\\Mohanad.Khh\\IdeaProjects\\Advanced Programming_Project\\Saturation.jpg");
//                            imageView = new ImageView(image);
//                            imageView.setX(b.positionX1+1);
//                            imageView.setY(b.positionY1+1);
//                            imageView.setFitWidth(width-2);
//                            imageView.setFitHeight(height-2);
//                            layout.getChildren().add(imageView);
//                        }
//                        else if (b.name.equalsIgnoreCase("Constant")){
//                            Label lab = new Label("1");
//                            lab.setLayoutX(b.positionX1 + (width/3));
//                            lab.setLayoutY(b.positionY1 + (height/4));
//                            layout.getChildren().add(lab);
//                       }
//                        else if (b.name.equalsIgnoreCase("Scope")){
//                            image = new Image("C:\\Users\\Mohanad.Khh\\IdeaProjects\\Advanced Programming_Project\\Scope.jpg");
//                            imageView = new ImageView(image);
//                            imageView.setX(b.positionX1+1);
//                            imageView.setY(b.positionY1+1);
//                            imageView.setFitWidth(width-2);
//                            imageView.setFitHeight(height-2);
//                            layout.getChildren().add(imageView);
//                        }
//                        else if (b.name.equalsIgnoreCase("Unit Delay")){
//                            image = new Image("C:\\Users\\Mohanad.Khh\\IdeaProjects\\Advanced Programming_Project\\Unit Delay.jpg");
//                            imageView = new ImageView(image);
//                            imageView.setX(b.positionX1+1);
//                            imageView.setY(b.positionY1+1);
//                            imageView.setFitWidth(width-2);
//                            imageView.setFitHeight(height-2);
//                            layout.getChildren().add(imageView);
//                        }


                    }
                } catch (FileNotFoundException e) {
                    throw new RuntimeException(e);
                }              }

